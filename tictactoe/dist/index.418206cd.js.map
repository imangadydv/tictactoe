{"mappings":"ICmBI,EAnBJ,QAAQ,GAAG,CAAC,wCAGZ,MAAM,EAAuB,CAC3B,CAAC,EAAG,EAAG,EAAE,CACT,CAAC,EAAG,EAAG,EAAE,CACT,CAAC,EAAG,EAAG,EAAE,CACT,CAAC,EAAG,EAAG,EAAE,CACT,CAAC,EAAG,EAAG,EAAE,CACT,CAAC,EAAG,EAAG,EAAE,CACT,CAAC,EAAG,EAAG,EAAE,CACT,CAAC,EAAG,EAAG,EAAE,CACV,CAEK,EAAe,SAAS,gBAAgB,CAAC,eACzC,EAAQ,SAAS,aAAa,CAAC,UAC/B,EAAwB,SAAS,cAAc,CAAC,kBAChD,EAA4B,SAAS,aAAa,CAAC,+BACnD,EAAgB,SAAS,cAAc,CAAC,iBAO9C,SAAS,IACP,EAAQ,CAAA,EACR,EAAa,OAAO,CAAC,AAAA,IACnB,EAAK,SAAS,CAAC,MAAM,CA3BT,KA4BZ,EAAK,SAAS,CAAC,MAAM,CA3BT,KA4BZ,EAAK,mBAAmB,CAAC,QAAS,GAClC,EAAK,gBAAgB,CAAC,QAAS,EAAa,CAAE,KAAM,CAAA,CAAK,EAC3D,GACA,IACA,EAAsB,SAAS,CAAC,MAAM,CAAC,OACzC,CAEA,SAAS,EAAY,CAAC,EACpB,IAAM,EAAO,EAAE,MAAM,CACf,EAAe,EArCP,IADA,IAuCd,AA0BF,CAAA,SAAmB,CAAI,CAAE,CAAY,EACnC,EAAK,SAAS,CAAC,GAAG,CAAC,EACrB,CAAA,EA5BY,EAAM,GA6CT,EAAqB,IAAI,CAAC,AAAA,GACxB,EAAY,KAAK,CAAC,AAAA,GAChB,CAAY,CAAC,EAAM,CAAC,SAAS,CAAC,QAAQ,CA9CpC,KACX,EAAQ,CAAA,GAmBH,IAAI,EAAa,CAAC,KAAK,CAAC,AAAA,GACtB,EAAK,SAAS,CAAC,QAAQ,CA7DlB,MA6D+B,EAAK,SAAS,CAAC,QAAQ,CA5DtD,MA0CZ,EAAQ,CAAA,IA2BV,EAAQ,CAAC,EAxBP,IAEJ,CAEA,SAAS,EAAQ,CAAI,EACf,EACF,EAA0B,SAAS,CAAG,QAEtC,EAA0B,SAAS,CAAG,CAAC,EAAE,EAAQ,MAAQ,MAAM,MAAM,CAAC,CAExE,EAAsB,SAAS,CAAC,GAAG,CAAC,OACtC,CAgBA,SAAS,IACP,EAAM,SAAS,CAAC,MAAM,CA1ER,KA2Ed,EAAM,SAAS,CAAC,MAAM,CA1ER,KA2EV,EACF,EAAM,SAAS,CAAC,GAAG,CA5EP,KA8EZ,EAAM,SAAS,CAAC,GAAG,CA/EP,IAiFhB,CA7DA,IAEA,EAAc,gBAAgB,CAAC,QAAS","sources":["<anon>","src/script.js"],"sourcesContent":["console.log(\"JavaScript file loaded successfully.\");\nconst X_CLASS = \"x\";\nconst O_CLASS = \"o\";\nconst WINNING_COMBINATIONS = [\n    [\n        0,\n        1,\n        2\n    ],\n    [\n        3,\n        4,\n        5\n    ],\n    [\n        6,\n        7,\n        8\n    ],\n    [\n        0,\n        3,\n        6\n    ],\n    [\n        1,\n        4,\n        7\n    ],\n    [\n        2,\n        5,\n        8\n    ],\n    [\n        0,\n        4,\n        8\n    ],\n    [\n        2,\n        4,\n        6\n    ]\n];\nconst cellElements = document.querySelectorAll(\"[data-cell]\");\nconst board = document.querySelector(\".board\");\nconst winningMessageElement = document.getElementById(\"winningMessage\");\nconst winningMessageTextElement = document.querySelector(\"[data-winning-message-text]\");\nconst restartButton = document.getElementById(\"restartButton\");\nlet oTurn;\nstartGame();\nrestartButton.addEventListener(\"click\", startGame);\nfunction startGame() {\n    oTurn = false;\n    cellElements.forEach((cell)=>{\n        cell.classList.remove(X_CLASS);\n        cell.classList.remove(O_CLASS);\n        cell.removeEventListener(\"click\", handleClick);\n        cell.addEventListener(\"click\", handleClick, {\n            once: true\n        });\n    });\n    setBoardHoverClass();\n    winningMessageElement.classList.remove(\"show\");\n}\nfunction handleClick(e) {\n    const cell = e.target;\n    const currentClass = oTurn ? O_CLASS : X_CLASS;\n    placeMark(cell, currentClass);\n    if (checkWin(currentClass)) endGame(false);\n    else if (isDraw()) endGame(true);\n    else {\n        swapTurns();\n        setBoardHoverClass();\n    }\n}\nfunction endGame(draw) {\n    if (draw) winningMessageTextElement.innerText = \"Draw!\";\n    else winningMessageTextElement.innerText = `${oTurn ? \"O's\" : \"X's\"} Wins!`;\n    winningMessageElement.classList.add(\"show\");\n}\nfunction isDraw() {\n    return [\n        ...cellElements\n    ].every((cell)=>{\n        return cell.classList.contains(X_CLASS) || cell.classList.contains(O_CLASS);\n    });\n}\nfunction placeMark(cell, currentClass) {\n    cell.classList.add(currentClass);\n}\nfunction swapTurns() {\n    oTurn = !oTurn;\n}\nfunction setBoardHoverClass() {\n    board.classList.remove(X_CLASS);\n    board.classList.remove(O_CLASS);\n    if (oTurn) board.classList.add(O_CLASS);\n    else board.classList.add(X_CLASS);\n}\nfunction checkWin(currentClass) {\n    return WINNING_COMBINATIONS.some((combination)=>{\n        return combination.every((index)=>{\n            return cellElements[index].classList.contains(currentClass);\n        });\n    });\n}\n\n//# sourceMappingURL=index.418206cd.js.map\n","console.log(\"JavaScript file loaded successfully.\");\r\nconst X_CLASS = 'x'\r\nconst O_CLASS = 'o'\r\nconst WINNING_COMBINATIONS = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [2, 4, 6]\r\n]\r\n\r\nconst cellElements = document.querySelectorAll('[data-cell]')\r\nconst board = document.querySelector('.board')\r\nconst winningMessageElement = document.getElementById('winningMessage')\r\nconst winningMessageTextElement = document.querySelector('[data-winning-message-text]')\r\nconst restartButton = document.getElementById('restartButton')\r\nlet oTurn\r\n\r\nstartGame()\r\n\r\nrestartButton.addEventListener('click', startGame)\r\n\r\nfunction startGame() {\r\n  oTurn = false\r\n  cellElements.forEach(cell => {\r\n    cell.classList.remove(X_CLASS)\r\n    cell.classList.remove(O_CLASS)\r\n    cell.removeEventListener('click', handleClick)\r\n    cell.addEventListener('click', handleClick, { once: true })\r\n  })\r\n  setBoardHoverClass()\r\n  winningMessageElement.classList.remove('show')\r\n}\r\n\r\nfunction handleClick(e) {\r\n  const cell = e.target\r\n  const currentClass = oTurn ? O_CLASS : X_CLASS\r\n  placeMark(cell, currentClass)\r\n  if (checkWin(currentClass)) {\r\n    endGame(false)\r\n  } else if (isDraw()) {\r\n    endGame(true)\r\n  } else {\r\n    swapTurns()\r\n    setBoardHoverClass()\r\n  }\r\n}\r\n\r\nfunction endGame(draw) {\r\n  if (draw) {\r\n    winningMessageTextElement.innerText = 'Draw!'\r\n  } else {\r\n    winningMessageTextElement.innerText = `${oTurn ? \"O's\" : \"X's\"} Wins!`\r\n  }\r\n  winningMessageElement.classList.add('show')\r\n}\r\n\r\nfunction isDraw() {\r\n  return [...cellElements].every(cell => {\r\n    return cell.classList.contains(X_CLASS) || cell.classList.contains(O_CLASS)\r\n  })\r\n}\r\n\r\nfunction placeMark(cell, currentClass) {\r\n  cell.classList.add(currentClass)\r\n}\r\n\r\nfunction swapTurns() {\r\n  oTurn = !oTurn\r\n}\r\n\r\nfunction setBoardHoverClass() {\r\n  board.classList.remove(X_CLASS)\r\n  board.classList.remove(O_CLASS)\r\n  if (oTurn) {\r\n    board.classList.add(O_CLASS)\r\n  } else {\r\n    board.classList.add(X_CLASS)\r\n  }\r\n}\r\n\r\nfunction checkWin(currentClass) {\r\n  return WINNING_COMBINATIONS.some(combination => {\r\n    return combination.every(index => {\r\n      return cellElements[index].classList.contains(currentClass)\r\n    })\r\n  })\r\n}\r\n"],"names":["oTurn","console","log","WINNING_COMBINATIONS","cellElements","document","querySelectorAll","board","querySelector","winningMessageElement","getElementById","winningMessageTextElement","restartButton","startGame","forEach","cell","classList","remove","removeEventListener","handleClick","addEventListener","once","setBoardHoverClass","e","target","currentClass","placeMark","add","some","combination","every","index","contains","endGame","draw","innerText"],"version":3,"file":"index.418206cd.js.map"}